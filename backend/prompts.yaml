# AI Generator Prompts

# Order Generation
order_instructions: |
  You are a synthetic order generator for a Shopify store. Your task is to generate realistic, 
  contextually aware order data based on existing store products.
  You must return a valid JSON response matching the exact format specified.
  The response must be a JSON object with 'orders' as the root key.

  When generating orders, follow these guidelines:
  1. Create realistic customer profiles with valid email formats and addresses
  2. Use appropriate price ranges from the provided product data
  3. Generate plausible order quantities (typically 1-5 items per order)
  4. Create timestamps within the specified date range
  5. Ensure line items reference valid product variants
  6. Generate realistic shipping addresses and customer information
  7. Include appropriate tags and custom attributes
  8. Create realistic order totals including taxes and shipping

order_generation: |
  Generate {count} realistic orders using the following products:
  {products_json}

  The orders should be generated within the last {date_range_days} days.

  Return a JSON object with an 'orders' array containing the generated orders.
  Each order must follow this exact structure for Shopify draft orders:
  {{
    "email": "string (valid email)",
    "tags": ["AI_GENERATED"],
    "lineItems": [
      {{
        "variantId": "string (format: gid://shopify/ProductVariant/INTEGER_ID)",
        "quantity": "integer (1-5)",
        "taxable": true
      }}
    ],
    "shippingAddress": {{
      "address1": "string",
      "city": "string",
      "province": "string",
      "country": "string",
      "zip": "string",
      "firstName": "string",
      "lastName": "string"
    }},
    "note": "Created via Synthetic Data Generator",
    "customAttributes": [
      {{
        "key": "source",
        "value": "synthetic_data"
      }},
      {{
        "key": "generated_at",
        "value": "ISO8601 timestamp"
      }}
    ]
  }}

order_schema: |
  {
    "created_at": {
      "type": "string",
      "format": "date-time",
      "description": "ISO format timestamp"
    },
    "customer": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "default_address": {
          "type": "object",
          "properties": {
            "address1": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "province_code": {
              "type": "string"
            },
            "zip": {
              "type": "string"
            },
            "country_code": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            }
          }
        }
      }
    },
    "line_items": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "variant_id": {
            "type": "string",
            "pattern": "^gid://shopify/ProductVariant/\\d+$"
          },
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "maximum": 5
          },
          "taxable": {
            "type": "boolean",
            "default": true
          }
        }
      }
    },
    "total_price_set": {
      "type": "object",
      "properties": {
        "shop_money": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "string"
            },
            "currency_code": {
              "type": "string"
            }
          }
        }
      }
    },
    "subtotal_price_set": {
      "type": "object",
      "properties": {
        "shop_money": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "string"
            },
            "currency_code": {
              "type": "string"
            }
          }
        }
      }
    },
    "total_tax_set": {
      "type": "object",
      "properties": {
        "shop_money": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "string"
            },
            "currency_code": {
              "type": "string"
            }
          }
        }
      }
    }
  }

order_response_schema: |
  {
    "type": "object",
    "properties": {
      "orders": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "format": "email"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": ["AI_GENERATED"]
            },
            "lineItems": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "variantId": {
                    "type": "string",
                    "pattern": "^gid://shopify/ProductVariant/\\d+$"
                  },
                  "quantity": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5
                  },
                  "taxable": {
                    "type": "boolean",
                    "default": true
                  }
                },
                "required": ["variantId", "quantity"]
              },
              "minItems": 1
            },
            "shippingAddress": {
              "type": "object",
              "properties": {
                "address1": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "province": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "zip": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                }
              },
              "required": ["address1", "city", "province", "country", "zip", "firstName", "lastName"]
            },
            "note": {
              "type": "string",
              "const": "Created via Synthetic Data Generator"
            },
            "customAttributes": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "required": ["key", "value"]
              },
              "minItems": 2
            }
          },
          "required": ["email", "tags", "lineItems", "shippingAddress", "note", "customAttributes"]
        }
      }
    },
    "required": ["orders"]
  }

# Inventory Adjustment Generation
inventory_instructions: |
  You are a synthetic inventory adjustment generator for a Shopify store. Your task is to generate realistic, 
  contextually aware inventory adjustment data based on existing store products.
  You must return a valid JSON response matching the exact format specified.
  The response must be a JSON object with 'adjustments' as the root key.

  When generating inventory adjustments, follow these guidelines:
  1. Create realistic adjustment quantities (-5 to +10)
  2. Use appropriate reasons for adjustments (recount, received, damaged, sold)
  3. Generate plausible timestamps
  4. Ensure adjustments reference valid product variants
  5. Maintain realistic patterns in inventory management

inventory_generation: |
  Generate {count} realistic inventory adjustments using the following products:
  {products_json}

  Return a JSON object with an 'adjustments' array containing the generated adjustments.
  Each adjustment must follow this exact structure:
  {{
    "variant_id": "integer",
    "adjustment": "integer between -5 and 10",
    "reason": "one of: recount, received, damaged, sold",
    "timestamp": "ISO8601 timestamp"
  }}

inventory_schema: |
  {
    "variant_id": {
      "type": "integer"
    },
    "product_id": {
      "type": "integer"
    },
    "adjustment": {
      "type": "integer",
      "minimum": -5,
      "maximum": 10,
      "description": "Positive or negative integer"
    },
    "sku": {
      "type": "string"
    },
    "reason": {
      "type": "string",
      "enum": ["recount", "received", "damaged", "sold"],
      "description": "Reason for the inventory adjustment"
    },
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "ISO format timestamp"
    }
  }

inventory_response_schema: |
  {
    "type": "object",
    "properties": {
      "adjustments": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "variant_id": {
              "type": "integer"
            },
            "product_id": {
              "type": "integer"
            },
            "adjustment": {
              "type": "integer",
              "minimum": -5,
              "maximum": 10
            },
            "sku": {
              "type": "string"
            },
            "reason": {
              "type": "string",
              "enum": ["recount", "received", "damaged", "sold"]
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": ["variant_id", "product_id", "adjustment", "reason", "timestamp"]
        }
      }
    },
    "required": ["adjustments"]
  } 